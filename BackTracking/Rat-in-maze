class Solution {
    static ArrayList<String> find(int[][] maze){
        ArrayList<String> res=new ArrayList<>();
        int n=maze.length;
        boolean[][] visited=new boolean[n][n];
        if(maze[0][0]==1){
            solve(res,visited,maze,0,0,n,"");
        }
        Collections.sort(res);
        return res;
    }
    static void solve( ArrayList<String> res,boolean[][] visited,int[][] maze,int i,int j,int n,String v){
        if(i==n-1&&j==n-1){
            res.add(v);
            return;
        }
        visited[i][j]=true;
        int[] r={1,0,0,-1};
        int[] c={0,-1,1,0};
        char[] dirs={'D','L','R','U'};
        for(int k=0;k<4;k++){
            int ni=i+r[k];
            int nj=j+c[k];
            if(ni>=0&&nj>=0&&ni<n&&nj<n&&maze[ni][nj]==1&&!visited[ni][nj]){
                solve(res,visited,maze,ni,nj,n,v+dirs[k]);
            }
        }
        visited[i][j]=false;
    }
    public ArrayList<String> ratInMaze(int[][] maze) {
      
        int n=maze.length;
        ArrayList<String> ans=find(maze);
        return ans;
        
    }
}
